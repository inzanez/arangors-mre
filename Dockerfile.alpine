# Using multistage build:
#   https://docs.docker.com/develop/develop-images/multistage-build/
#   https://whitfin.io/speeding-up-rust-docker-builds/
##########################  BUILD IMAGE  ##########################
# Musl build image to build portals statically compiled binary
FROM alpine:3.12 as builder

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH

ENV USER "root"
ENV RUSTFLAGS='-C link-arg=-s'
ENV OPENSSL_STATIC yes
ENV OPENSSL_LIB_DIR "/openssl/lib"
ENV OPENSSL_INCLUDE_DIR "/openssl/include"

RUN set -eux; \
    apk add --no-cache \
    ca-certificates \
    gcc \
    g++ \
    musl-dev \
    libtool \
    cmake \
    make; \
    \
    url="https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-musl/rustup-init"; \
    wget "$url"; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --default-toolchain nightly; \
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup --version; \
    cargo --version; \
    rustc --version;

COPY build_libressl.sh /build_libressl.sh
RUN sh /build_libressl.sh

RUN rm -rf /libressl*

# Specifies if the local project is build or if it gets build
# from the official git repository. Defaults to the git repo.
ARG LOCAL=false
# Specifies which revision/commit is build. Defaults to HEAD
ARG GIT_REF=origin/master

# Create dummy project to fetch all dependencies
# This makes rebuilds a lot faster (as long as no dependency changed),
# as it is its own layer
RUN cargo new --bin /app
WORKDIR /app

# Copy cargo files which specify needed dependencies
COPY ["./Cargo.*", "rust-toolchain", "./"]

# Build dependencies and remove dummy project, except
# target folder, as it contains the dependencies
RUN cargo build  --target=x86_64-unknown-linux-musl && \
    find . -not -path "./target*" -delete

# Now copy and build the real project with the pre-built
# dependencies.
COPY . .

RUN touch src/main.rs && \
    cargo build  --target=x86_64-unknown-linux-musl
########################## RUNTIME IMAGE ##########################
# Create new stage with a minimal image for the actual
# runtime image/container
FROM alpine:3.12

ARG CREATED
ARG VERSION
ARG GIT_REF=origin/master

RUN apk add --no-cache \
        curl \
        ca-certificates

EXPOSE 8080

# Copy config files from context and the binary from
# the "builder" stage to the current stage into folder
RUN mkdir /srv/arangors-mre

#COPY --from=builder ["/app/Rocket.toml", "/data/"]
COPY --from=builder /app/target/x86_64-unknown-linux-musl/debug/arangors-mre /srv/arangors-mre/

# Add www-data user and group with UID 82, as used by alpine
# https://git.alpinelinux.org/aports/tree/main/nginx/nginx.pre-install
#RUN set -x ; \
#    addgroup -Sg 82 www-data 2>/dev/null ; \
#    adduser -S -D -H -h /srv/arangors-mre -G www-data -g www-data www-data 2>/dev/null ; \
#    addgroup www-data www-data 2>/dev/null && exit 0 ; exit 1

HEALTHCHECK --interval=1s CMD curl --fail -s http://localhost:8080/health || curl -k --fail -s https://localhost:8080/health || exit 1

# Set user to www-data
USER root
WORKDIR /srv/arangors-mre
ENTRYPOINT [ "/srv/arangors-mre/arangors-mre" ]
